name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- manual

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: Default

variables:
  python.version: '3.7.17'
  # Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'Azure Udacity'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    steps:
   
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: 'latest'

    # Run Terraform init
    - task: TerraformTask@5
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendAzureRmUseEntraIdForAuthentication: false
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate45611955'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformTask@5
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
   
    # Install SSH key
    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: 'udacityadmin@1.1.1.1'
        sshKeySecureFile: 'id_rsa'

    # Download public key
    - task: DownloadSecureFile@1
      displayName: Download Public Key
      name: publicKey
      inputs:
        secureFile: 'id_rsa.pub'

    # Copy public key to terraform folder
    - task: CopyFiles@2
      displayName: Copy Public Key
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: 'id_rsa.pub'
        TargetFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Run Terraform Apply
    - task: TerraformTask@5
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#    # Destroy the resources in Azure
#    - task: TerraformTask@5
#      displayName: Terraform destroy
#      inputs:
#        provider: 'azurerm'
#        command: 'destroy'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#    
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
#    - task: CmdLine@2
#      displayName: Run Data Validation Tests
#      continueOnError: true
#      inputs:
#        script: 'newman run TestSuite.Data-Validation.json -e Test.Environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
#    - task: CmdLine@2
#      displayName: Run Regression Tests
#      continueOnError: true
#      inputs:
#        script: 'newman run TestSuite.Regression.json -e Test.Environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
#    - task: PublishTestResults@2
#      inputs:
#        testResultsFormat: 'JUnit'
#        testResultsFiles: '**/TEST-*.xml'
#        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#        mergeTestResults: true
#        testRunTitle: Validation and Regression Tests

        #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
#    - task: ArchiveFiles@2
#      displayName: 'Archive FakeRestAPI'
#      inputs:
#        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
#        includeRootFolder: false
#        archiveType: 'zip'
#        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#      displayName: 'Upload Package'
#      artifact: drop-fakerestapi
        
    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
#    - task: ArchiveFiles@2
#      displayName: 'Archive PerformanceTestSuite'
#      inputs:
#        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/'
#        includeRootFolder: false
#        archiveType: 'zip'
#        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
#    # JMeter Test Suite - Publish    
#    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
#      displayName: 'Upload Package'
#      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
#  - deployment: FakeRestAPI
#    displayName: Fake REST API
#    pool: Default
#    environment: test
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: AzureWebApp@1
#            displayName: 'Deploy Azure Web App'
#            inputs:
#              azureSubscription: 'Azure Udacity'
#              appType: 'webApp'
#              appName: 'azvProject4-AppService'
#              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
#              deploymentMethod: 'auto'
#
#          #--------------------------------------------#
#          # Run JMeter test suite against the App Service
#          - task: CmdLine@2
#            displayName: Run JMeter test suite
#            inputs:
#              script: |
#                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
#                tar -xf apache-jmeter-5.6.3.tgz
#                unzip -o $(Build.BuildId)-perftests.zip
#                ./apache-jmeter-5.6.3/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
#                cat results_stress.csv
#                cat results_endurance.csv
#              workingDirectory: $(Pipeline.Workspace)/drop-perftests
  
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: test
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo add-apt-repository universe -y
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y python3-selenium
                cd ~/
                DIR=/home/azureuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/azureuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/azureuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/azureuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."