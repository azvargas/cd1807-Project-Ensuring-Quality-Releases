name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- manual

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: Default

variables:
  python.version: '3.7.17'
  # Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'Azure Udacity'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    steps:
    # Install Terraform on the pipeline agent 
   
    - task: TerraformInstaller@1
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: 'latest'

    # Run Terraform init
    - task: TerraformTask@5
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendAzureRmUseEntraIdForAuthentication: false
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate45611955'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformTask@5
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
   
    # Run Terraform Apply
    - task: TerraformTask@5
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#    # Destroy the resources in Azure
#    # ToDo: Change the workingDirectory path, as applicable to you
#    - task: TerraformTask@5
#      displayName: Terraform destroy
#      inputs:
#        provider: 'azurerm'
#        command: 'destroy'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  - job: TestFakeRestAPI
    displayName: Test Fake Rest API
    steps:
      # Install Newman
      # - task: CmdLine@2
      #   displayName: Install Newman
      #   inputs:
      #     script: 'sudo npm install newman'
      #     workingDirectory: $(System.DefaultWorkingDirectory)

      # Postman Data Validation Test Suite    
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run TestSuite.Data-Validation.json -e Test.Environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
          workingDirectory: '$(projectRoot)/automatedtesting/postman'

      # Postman Regression Test Suite    
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run TestSuite.Regression.json -e Test.Environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
          workingDirectory: '$(projectRoot)/automatedtesting/postman'
          
      # Postman - Publish Results 
      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          searchFolder: '$(projectRoot)/automatedtesting/postman'
          mergeTestResults: true
          testRunTitle: Regresion and Data Validation Tests

  - job: PackageAndPublish
    displayName: Package and Publish Files
    steps:
      #--------------------------------------------#
      # Selenium (UI) Test Suite - Archive the package  
      # "ArchiveFiles@2" picks up the web package and archives it.
      - task: ArchiveFiles@2
        displayName: 'Archive UI Tests'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    
      # Selenium Test Suite - Publish the package  
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
        displayName: 'Upload Package'
        artifact: drop-uitests

      #--------------------------------------------#    
      # FakeRestAPI - Archive
      # ToDo: Complete the ArchiveFiles@2 task and publish step 
      - task: ArchiveFiles@2
        displayName: 'Archive FakeRestAPI'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        displayName: 'Upload Package'
        artifact: drop-fakerestapi
        
      #--------------------------------------------#  
      # JMeter (Performance) Test Suite - Archive
      # ToDo: Complete the ArchiveFiles@2 task and publish step 
      - task: ArchiveFiles@2
        displayName: 'Archive PerformanceTestSuite'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
      # JMeter Test Suite - Publish    
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
        displayName: 'Upload Package'
        artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    displayName: Deploy Fake Rest API
    pool: Default
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure Udacity'
              appType: 'webApp'
              appName: 'azvProject4-AppService'
              package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
